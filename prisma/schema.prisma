// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  menuItems MenuItem[]

  @@map("categories")
}

model MenuItem {
  id          String     @id @default(cuid())
  name        String
  description String
  price       Decimal    @db.Decimal(10,2)
  image       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  categoryId  String
  category    Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]

  @@map("menu_items")
}

model Table {
  id         String       @id @default(cuid())
  number     String       @unique // e.g. "T01", "A2"
  status     TableStatus  @default(AVAILABLE)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  // Relations
  orders     Order[]

  @@map("tables")
}

model Order {
  id            String       @id @default(cuid())
  total         Decimal      @db.Decimal(10,2)
  status        OrderStatus  @default(PENDING)
  paymentMethod String?
  paymentTime   DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  tableId       String
  table         Table        @relation(fields: [tableId], references: [id], onDelete: Restrict)
  items         OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  quantity    Int
  price       Decimal  @db.Decimal(10,2)

  // Relations
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItemId  String
  menuItem    MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

enum OrderStatus {
  PENDING
  COMPLETED
  PAID
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
}

